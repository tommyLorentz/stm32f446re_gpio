
75.stm32f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000684  0800068c  0001068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000684  08000684  0001068c  2**0
                  CONTENTS
  4 .ARM          00000000  08000684  08000684  0001068c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000684  0800068c  0001068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000684  08000684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800068c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800068c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001068c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001087  00000000  00000000  000106b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002d9  00000000  00000000  0001173d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d0  00000000  00000000  00011a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00011ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001ccd  00000000  00000000  00011b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c4d  00000000  00000000  0001385d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000839e  00000000  00000000  000144aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001c848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b0  00000000  00000000  0001c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800066c 	.word	0x0800066c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800066c 	.word	0x0800066c

08000204 <delay>:

#define VIDEO_103	"LED_PUSH_PULL"

#if defined(VIDEO_103)
void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i=0; i<100000; ++i) { }
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <delay+0x24>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0001869f 	.word	0x0001869f

0800022c <video103_push_pull_led>:

void video103_push_pull_led(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	memset(&GpioLed, 0x00, sizeof(GpioLed));
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	220c      	movs	r2, #12
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa0f 	bl	800065c <memset>
	GpioLed.pGpioBase = GPIOA;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <video103_push_pull_led+0x4c>)
 8000240:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000242:	2305      	movs	r3, #5
 8000244:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000246:	2301      	movs	r3, #1
 8000248:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_PUPD_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_FAST;
 800024e:	2302      	movs	r3, #2
 8000250:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OTYPE_PUPL;
 8000252:	2300      	movs	r3, #0
 8000254:	733b      	strb	r3, [r7, #12]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <video103_push_pull_led+0x4c>)
 800025a:	f000 f841 	bl	80002e0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f90d 	bl	8000480 <GPIO_Init>


	while(1)
	{
		GPIO_ToggleOutputPin(GpioLed.pGpioBase, GpioLed.GPIO_PinConfig.GPIO_PinNumber);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7a3a      	ldrb	r2, [r7, #8]
 800026a:	4611      	mov	r1, r2
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f9bd 	bl	80005ec <GPIO_ToggleOutputPin>
		delay();
 8000272:	f7ff ffc7 	bl	8000204 <delay>
		GPIO_ToggleOutputPin(GpioLed.pGpioBase, GpioLed.GPIO_PinConfig.GPIO_PinNumber);
 8000276:	e7f6      	b.n	8000266 <video103_push_pull_led+0x3a>
 8000278:	40020000 	.word	0x40020000

0800027c <main>:
	}
}
#endif

int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
#if defined(VIDEO_103)
	video103_push_pull_led();
 8000280:	f7ff ffd4 	bl	800022c <video103_push_pull_led>
#endif
	return 0;
 8000284:	2300      	movs	r3, #0
}
 8000286:	4618      	mov	r0, r3
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f9ab 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffdd 	bl	800027c <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	0800068c 	.word	0x0800068c
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note        - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGpioBase, uint8_t IsEn)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
	if (IsEn == ENABLE)
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d157      	bne.n	80003a2 <GPIO_PeriClockControl+0xc2>
	{
		if (pGpioBase == GPIOA) GPIOA_PCLK_ENABLE();
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a59      	ldr	r2, [pc, #356]	; (800045c <GPIO_PeriClockControl+0x17c>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x28>
 80002fa:	4b59      	ldr	r3, [pc, #356]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a58      	ldr	r2, [pc, #352]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGpioBase == GPIOE) GPIOE_PCLK_DI();
		else if (pGpioBase == GPIOF) GPIOF_PCLK_DI();
		else if (pGpioBase == GPIOG) GPIOG_PCLK_DI();
		else if (pGpioBase == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000306:	e0a3      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOB) GPIOB_PCLK_ENABLE();
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a56      	ldr	r2, [pc, #344]	; (8000464 <GPIO_PeriClockControl+0x184>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x3e>
 8000310:	4b53      	ldr	r3, [pc, #332]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a52      	ldr	r2, [pc, #328]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e098      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOC) GPIOC_PCLK_ENABLE();
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a51      	ldr	r2, [pc, #324]	; (8000468 <GPIO_PeriClockControl+0x188>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x54>
 8000326:	4b4e      	ldr	r3, [pc, #312]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a4d      	ldr	r2, [pc, #308]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e08d      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOD) GPIOD_PCLK_ENABLE();
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a4d      	ldr	r2, [pc, #308]	; (800046c <GPIO_PeriClockControl+0x18c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x6a>
 800033c:	4b48      	ldr	r3, [pc, #288]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a47      	ldr	r2, [pc, #284]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e082      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOE) GPIOE_PCLK_ENABLE();
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a48      	ldr	r2, [pc, #288]	; (8000470 <GPIO_PeriClockControl+0x190>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x80>
 8000352:	4b43      	ldr	r3, [pc, #268]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a42      	ldr	r2, [pc, #264]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e077      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOF) GPIOF_PCLK_ENABLE();
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a44      	ldr	r2, [pc, #272]	; (8000474 <GPIO_PeriClockControl+0x194>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x96>
 8000368:	4b3d      	ldr	r3, [pc, #244]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a3c      	ldr	r2, [pc, #240]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e06c      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOG) GPIOG_PCLK_ENABLE();
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a3f      	ldr	r2, [pc, #252]	; (8000478 <GPIO_PeriClockControl+0x198>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0xac>
 800037e:	4b38      	ldr	r3, [pc, #224]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a37      	ldr	r2, [pc, #220]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e061      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOH) GPIOH_PCLK_ENABLE();
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a3b      	ldr	r2, [pc, #236]	; (800047c <GPIO_PeriClockControl+0x19c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d15d      	bne.n	8000450 <GPIO_PeriClockControl+0x170>
 8000394:	4b32      	ldr	r3, [pc, #200]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a31      	ldr	r2, [pc, #196]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800039a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e056      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		if (pGpioBase == GPIOA) GPIOA_PCLK_DI();
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a2d      	ldr	r2, [pc, #180]	; (800045c <GPIO_PeriClockControl+0x17c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0xd8>
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a2c      	ldr	r2, [pc, #176]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003b0:	f023 0301 	bic.w	r3, r3, #1
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e04b      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOB) GPIOB_PCLK_DI();
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a2a      	ldr	r2, [pc, #168]	; (8000464 <GPIO_PeriClockControl+0x184>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0xee>
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003c6:	f023 0302 	bic.w	r3, r3, #2
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e040      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOC) GPIOC_PCLK_DI();
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a25      	ldr	r2, [pc, #148]	; (8000468 <GPIO_PeriClockControl+0x188>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x104>
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003dc:	f023 0304 	bic.w	r3, r3, #4
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e035      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOD) GPIOD_PCLK_DI();
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a21      	ldr	r2, [pc, #132]	; (800046c <GPIO_PeriClockControl+0x18c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0x11a>
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <GPIO_PeriClockControl+0x180>)
 80003f2:	f023 0308 	bic.w	r3, r3, #8
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e02a      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOE) GPIOE_PCLK_DI();
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <GPIO_PeriClockControl+0x190>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0x130>
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000408:	f023 0310 	bic.w	r3, r3, #16
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e01f      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOF) GPIOF_PCLK_DI();
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a18      	ldr	r2, [pc, #96]	; (8000474 <GPIO_PeriClockControl+0x194>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClockControl+0x146>
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a10      	ldr	r2, [pc, #64]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800041e:	f023 0320 	bic.w	r3, r3, #32
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e014      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOG) GPIOG_PCLK_DI();
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a13      	ldr	r2, [pc, #76]	; (8000478 <GPIO_PeriClockControl+0x198>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClockControl+0x15c>
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e009      	b.n	8000450 <GPIO_PeriClockControl+0x170>
		else if (pGpioBase == GPIOH) GPIOH_PCLK_DI();
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a0f      	ldr	r2, [pc, #60]	; (800047c <GPIO_PeriClockControl+0x19c>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d105      	bne.n	8000450 <GPIO_PeriClockControl+0x170>
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <GPIO_PeriClockControl+0x180>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a05      	ldr	r2, [pc, #20]	; (8000460 <GPIO_PeriClockControl+0x180>)
 800044a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40020000 	.word	0x40020000
 8000460:	40023800 	.word	0x40023800
 8000464:	40020400 	.word	0x40020400
 8000468:	40020800 	.word	0x40020800
 800046c:	40020c00 	.word	0x40020c00
 8000470:	40021000 	.word	0x40021000
 8000474:	40021400 	.word	0x40021400
 8000478:	40021800 	.word	0x40021800
 800047c:	40021c00 	.word	0x40021c00

08000480 <GPIO_Init>:

/*
 * Init and Deinit
 */
void GPIO_Init(GPIO_Handle_t *pGpioPinHandle)
{
 8000480:	b480      	push	{r7}
 8000482:	b087      	sub	sp, #28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	uint32_t reg = 0, temp;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

	// 1. configure the mode of gpio pin
	if (pGpioPinHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d81c      	bhi.n	80004ce <GPIO_Init+0x4e>
	{
		// non-interrupt mode
		reg = pGpioPinHandle->GPIO_PinConfig.GPIO_PinMode;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	617b      	str	r3, [r7, #20]
		reg <<= (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
		temp = ~( 0x3 << (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2) ) & pGpioPinHandle->pGpioBase->MODER;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2203      	movs	r2, #3
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4013      	ands	r3, r2
 80004c0:	613b      	str	r3, [r7, #16]
		pGpioPinHandle->pGpioBase->MODER = temp | reg;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6939      	ldr	r1, [r7, #16]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
	{
		// interrupt mode
	}

	// 2. configure the speed
	if (pGpioPinHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUTPUT)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	795b      	ldrb	r3, [r3, #5]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d11c      	bne.n	8000510 <GPIO_Init+0x90>
	{
		reg = pGpioPinHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	799b      	ldrb	r3, [r3, #6]
 80004da:	617b      	str	r3, [r7, #20]
		reg <<= (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	617b      	str	r3, [r7, #20]
		temp = ~( 0x3 << (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2) ) & pGpioPinHandle->pGpioBase->OSPEEDER;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2203      	movs	r2, #3
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
		pGpioPinHandle->pGpioBase->OSPEEDER = temp | reg;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6939      	ldr	r1, [r7, #16]
 800050a:	697a      	ldr	r2, [r7, #20]
 800050c:	430a      	orrs	r2, r1
 800050e:	609a      	str	r2, [r3, #8]
	}

	// 3. configure the pupd settings
	{
		reg = pGpioPinHandle->GPIO_PinConfig.GPIO_PinPupdControl;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	79db      	ldrb	r3, [r3, #7]
 8000514:	617b      	str	r3, [r7, #20]
		reg <<= (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
		temp = ~( 0x3 << (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber * 2) ) & pGpioPinHandle->pGpioBase->PUPDR;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2203      	movs	r2, #3
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4013      	ands	r3, r2
 800053c:	613b      	str	r3, [r7, #16]
		pGpioPinHandle->pGpioBase->PUPDR = temp | reg;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6939      	ldr	r1, [r7, #16]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	430a      	orrs	r2, r1
 8000548:	60da      	str	r2, [r3, #12]
	}

	// 4. configure the output type
	if (pGpioPinHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUTPUT)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d11a      	bne.n	8000588 <GPIO_Init+0x108>
	{
		reg = pGpioPinHandle->GPIO_PinConfig.GPIO_PinOpType;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7a1b      	ldrb	r3, [r3, #8]
 8000556:	617b      	str	r3, [r7, #20]
		reg <<= (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	4093      	lsls	r3, r2
 8000562:	617b      	str	r3, [r7, #20]
		temp = ~( 0x1 << (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber) ) & pGpioPinHandle->pGpioBase->OTYPER;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	461a      	mov	r2, r3
 800056a:	2301      	movs	r3, #1
 800056c:	4093      	lsls	r3, r2
 800056e:	43db      	mvns	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
		pGpioPinHandle->pGpioBase->OTYPER = temp | reg;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6939      	ldr	r1, [r7, #16]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]
	}

	// 5. configure the alt functionality
	if (pGpioPinHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d128      	bne.n	80005e2 <GPIO_Init+0x162>
	{
		uint32_t isHigh, offset;

		offset = (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	f003 0307 	and.w	r3, r3, #7
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	60fb      	str	r3, [r7, #12]
		isHigh = (pGpioPinHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	60bb      	str	r3, [r7, #8]

		reg = pGpioPinHandle->GPIO_PinConfig.GPIO_PinAltFunMode << offset; // offset for pin x
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7a5b      	ldrb	r3, [r3, #9]
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
		temp = ~( 0xf << offset ) & pGpioPinHandle->pGpioBase->AFR[isHigh];
 80005b4:	220f      	movs	r2, #15
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	3208      	adds	r2, #8
 80005c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005cc:	400b      	ands	r3, r1
 80005ce:	613b      	str	r3, [r7, #16]
		pGpioPinHandle->pGpioBase->AFR[isHigh] = temp | reg;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6939      	ldr	r1, [r7, #16]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4311      	orrs	r1, r2
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	3208      	adds	r2, #8
 80005de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005e2:	bf00      	nop
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <GPIO_ToggleOutputPin>:
 * @return		- none
 *
 * @Note        - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGpioBase, uint8_t PinNumber)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	pGpioBase->ODR ^= (0x01 << PinNumber);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	78fa      	ldrb	r2, [r7, #3]
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	405a      	eors	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	615a      	str	r2, [r3, #20]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4e0d      	ldr	r6, [pc, #52]	; (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061a:	1ba4      	subs	r4, r4, r6
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2500      	movs	r5, #0
 8000620:	42a5      	cmp	r5, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4e0b      	ldr	r6, [pc, #44]	; (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	; (8000658 <__libc_init_array+0x44>)
 8000628:	f000 f820 	bl	800066c <_init>
 800062c:	1ba4      	subs	r4, r4, r6
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2500      	movs	r5, #0
 8000632:	42a5      	cmp	r5, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800063c:	4798      	blx	r3
 800063e:	3501      	adds	r5, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000646:	4798      	blx	r3
 8000648:	3501      	adds	r5, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000684 	.word	0x08000684
 8000650:	08000684 	.word	0x08000684
 8000654:	08000684 	.word	0x08000684
 8000658:	08000688 	.word	0x08000688

0800065c <memset>:
 800065c:	4402      	add	r2, r0
 800065e:	4603      	mov	r3, r0
 8000660:	4293      	cmp	r3, r2
 8000662:	d100      	bne.n	8000666 <memset+0xa>
 8000664:	4770      	bx	lr
 8000666:	f803 1b01 	strb.w	r1, [r3], #1
 800066a:	e7f9      	b.n	8000660 <memset+0x4>

0800066c <_init>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	bf00      	nop
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr

08000678 <_fini>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr
